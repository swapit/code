install.packages(Rmpfr)
install.packages('circlize')
install.packages('Rmpfr')
install.packages('RColorBrewer')
dev.off()
circus
col = colorRamp2(quantile(m4, seq(0, 1, by = 0.25)), brewer.pal(5,"Reds")),
transparency = 0.4, annotationTrack = c("name", "grid"))
chordDiagram(m2, grid.col = "mediumpurple4",
transparency = 0.4, annotationTrack = c("name", "grid"))
transparency = 0.4, annotationTrack = c("name", "grid")))
transparency=0.4, annotationTrack = c("name", "grid")))
transparency=0.4, annotationTrack = c("name", "grid"))
circlize::adjacencyList2Matrix()
CreateAdjacencyMatrix = function(x) {
s=gsub("\.", "", x)
m=matrix(0, 10, 10)
for (i in 1:(nchar(s)-1)) m[as.numeric(substr(s, i, i))+1, as.numeric(substr(s, i+1, i+1))+1]=m[as.numeric(substr(s, i, i))+1, as.numeric(substr(s, i+1, i+1))+1]+1
rownames(m) = 0:9;colnames(m) = 0:9
m}
dev.off()
m3=CreateAdjacencyMatrix(formatMpfr(Const("catalan",2000)))
ls
circus
r -f circus
r -f circus.R
clear
clean
for (i in 1:(nchar(s)-1)) m[as.numeric(substr(s, i, i))+1, as.numeric(substr(s, i+1, i+1))+1]=m[as.numeric(substr(s, i, i))+1, as.numeric(substr(s, i+1, i+1))+1]+1
rownames(m) = 0:9;colnames(m) = 0:9
m}
m1=CreateAdjacencyMatrix(formatMpfr(Const("pi",2000)))
m2=CreateAdjacencyMatrix(formatMpfr(Const("gamma",2000)))
m3=CreateAdjacencyMatrix(formatMpfr(Const("catalan",2000)))
m4=CreateAdjacencyMatrix(formatMpfr(Const("log2",2000)))
jpeg(filename = "Chords.jpg", width = 800, height = 800, quality = 100)
prar(mfrow=c(2,2), mar = c(1, 1, 1, 1))
chordDiagram(m1, grid.col = "darkgreen",
col = colorRamp2(quantile(m1, seq(0, 1, by = 0.25)), brewer.pal(5,"Greens")),
transparency = 0.4, annotationTrack = c("name", "grid"))
chordDiagram(m2, grid.col = "mediumpurple4",
col = colorRamp2(quantile(m2, seq(0, 1, by = 0.25)), brewer.pal(5,"Purples")),
transparency = 0.4, annotationTrack = c("name", "grid"))
chordDiagram(m3, grid.col = "midnightblue",
col = colorRamp2(quantile(m3, seq(0, 1, by = 0.25)), brewer.pal(5,"Blues")),
transparency = 0.4, annotationTrack = c("name", "grid"))
chordDiagram(m4, grid.col = "red3",
col = colorRamp2(quantile(m4, seq(0, 1, by = 0.25)), brewer.pal(5,"Reds")),
transparency = 0.4, annotationTrack = c("name", "grid"))
library(circlize)
library(circlize)
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(orig, dest, direc, stringsAsFactors = FALSE)
col = c("IB" = "red",
"OB" = "blue",
"RETURN" = "orange",
"DOM" = "green")
directional = c("IB" = -1,
"OB" = 1,
"RETURN" = 2,
"DOM" = 0)
diffHeight = c("IB" = -0.04,
"OB" = 0.04,
"RETURN" = 0,
"DOM" = 0)
chordDiagram(df[1:2], col = col[df[[3]]], directional = directional[df[[3]]],
direction.type = c("arrows+diffHeight"),
diffHeight = diffHeight[df[[3]]])
library(circlize)
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(orig, dest, direc, stringsAsFactors = FALSE)
col = c("IB" = "red",
"OB" = "blue",
"RETURN" = "orange",
"DOM" = "green")
directional = c("IB" = -1,
"OB" = 1,
"RETURN" = 2,
"DOM" = 0)
diffHeight = c("IB" = -0.04,
"OB" = 0.04,
"RETURN" = 0,
"DOM" = 0)
chordDiagram(df[1:2], col = col[df[[3]]], directional = directional[df[[3]]],
direction.type = c("arrows+diffHeight"),
diffHeight = diffHeight[df[[3]]])
legend("bottomleft", pch = 15, legend = names(col), col = col)
library(circlize)
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(orig, dest, direc, stringsAsFactors = FALSE)
col = c("IB" = "red",
"OB" = "blue",
"RETURN" = "orange",
"DOM" = "green")
directional = c("IB" = -1,
"OB" = 1,
"RETURN" = 2,
"DOM" = 0)
diffHeight = c("IB" = -0.04,
"OB" = 0.04,
"RETURN" = 0,
"DOM" = 0)
chordDiagram(df[1:2], col = col[df[[3]]], directional = directional[df[[3]]],
diffHeight = diffHeight[df[[3]]])
legend("bottomleft", pch = 15, legend = names(col), col = col)
library(circlize)
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(orig, dest, direc, stringsAsFactors = FALSE)
col = c("IB" = "red",
"OB" = "blue",
"RETURN" = "orange",
"DOM" = "green")
directional = c("IB" = -1,
"OB" = 1,
"RETURN" = 2,
"DOM" = 0)
diffHeight = c("IB" = -0.04,
"OB" = 0.04,
"RETURN" = 0,
"DOM" = 0)
chordDiagram(df[1:2], col = col[df[[3]]], directional = directional[df[[3]]],
diffHeight = diffHeight[df[[3]]])
legend("bottomleft", pch = 15, legend = names(col), col = col)
heisenberg <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
setwd("~/dev/matlab/RecSys/data/ratebeer")
heisenberg <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(orig, dest, direc, stringsAsFactors = FALSE)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
pair_trade[1]
pair_trade[0]
pair_trade[1]
pair_trade[2]
pair_trade[3]
pair_trade[4]
pair_trade[5]
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1], pair_trade[3])
chordDiagram(df[1:2])
pair_trade[1,1]
pair_trade[1,1:10]
pair_trade[1:10,1]
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1:10,1], pair_trade[1:10,3])
chordDiagram(df[1:2])
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1:1000,1], pair_trade[1:1000,3])
chordDiagram(df[1:2])
#legend("bottomleft", pch = 15, legend = names(col), col = col)
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1:1000,1], pair_trade[1:1000,3])
chordDiagram(df[1:2],transparency = 1.0)
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1:1000,1], pair_trade[1:1000,3])
chordDiagram(df[1:2],transparency = 0.0)
#legend("bottomleft", pch = 15, legend = names(col), col = col)
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1:2000,1], pair_trade[1:2000,3])
chordDiagram(df[1:2],transparency = 0.0)
setwd("~/dev/matlab/RecSys/data/reddit")
library(circlize)
pair_trade <- read.csv(file="pairs_dense.csv",head=FALSE,sep=",")
orig = c("IE","GB","US","ES","FI","US","IE","GB")
dest = c("FI","FI","ES","ES","US","US","US","IE")
direc = c("IB","OB","RETURN","DOM","OB","DOM","RETURN","IB")
df = data.frame(pair_trade[1], pair_trade[3])
chordDiagram(df[1:2],transparency = 0.0)
